drop policy "Enable all access for current user" on "public"."nova_leaderboard";

drop policy "Enable all access for current user" on "public"."nova_users_problem_history";

revoke delete on table "public"."nova_leaderboard"
from
    "anon";

revoke
insert
    on table "public"."nova_leaderboard"
from
    "anon";

revoke references on table "public"."nova_leaderboard"
from
    "anon";

revoke
select
    on table "public"."nova_leaderboard"
from
    "anon";

revoke trigger on table "public"."nova_leaderboard"
from
    "anon";

revoke truncate on table "public"."nova_leaderboard"
from
    "anon";

revoke
update
    on table "public"."nova_leaderboard"
from
    "anon";

revoke delete on table "public"."nova_leaderboard"
from
    "authenticated";

revoke
insert
    on table "public"."nova_leaderboard"
from
    "authenticated";

revoke references on table "public"."nova_leaderboard"
from
    "authenticated";

revoke
select
    on table "public"."nova_leaderboard"
from
    "authenticated";

revoke trigger on table "public"."nova_leaderboard"
from
    "authenticated";

revoke truncate on table "public"."nova_leaderboard"
from
    "authenticated";

revoke
update
    on table "public"."nova_leaderboard"
from
    "authenticated";

revoke delete on table "public"."nova_leaderboard"
from
    "service_role";

revoke
insert
    on table "public"."nova_leaderboard"
from
    "service_role";

revoke references on table "public"."nova_leaderboard"
from
    "service_role";

revoke
select
    on table "public"."nova_leaderboard"
from
    "service_role";

revoke trigger on table "public"."nova_leaderboard"
from
    "service_role";

revoke truncate on table "public"."nova_leaderboard"
from
    "service_role";

revoke
update
    on table "public"."nova_leaderboard"
from
    "service_role";

revoke delete on table "public"."nova_users_problem_history"
from
    "anon";

revoke
insert
    on table "public"."nova_users_problem_history"
from
    "anon";

revoke references on table "public"."nova_users_problem_history"
from
    "anon";

revoke
select
    on table "public"."nova_users_problem_history"
from
    "anon";

revoke trigger on table "public"."nova_users_problem_history"
from
    "anon";

revoke truncate on table "public"."nova_users_problem_history"
from
    "anon";

revoke
update
    on table "public"."nova_users_problem_history"
from
    "anon";

revoke delete on table "public"."nova_users_problem_history"
from
    "authenticated";

revoke
insert
    on table "public"."nova_users_problem_history"
from
    "authenticated";

revoke references on table "public"."nova_users_problem_history"
from
    "authenticated";

revoke
select
    on table "public"."nova_users_problem_history"
from
    "authenticated";

revoke trigger on table "public"."nova_users_problem_history"
from
    "authenticated";

revoke truncate on table "public"."nova_users_problem_history"
from
    "authenticated";

revoke
update
    on table "public"."nova_users_problem_history"
from
    "authenticated";

revoke delete on table "public"."nova_users_problem_history"
from
    "service_role";

revoke
insert
    on table "public"."nova_users_problem_history"
from
    "service_role";

revoke references on table "public"."nova_users_problem_history"
from
    "service_role";

revoke
select
    on table "public"."nova_users_problem_history"
from
    "service_role";

revoke trigger on table "public"."nova_users_problem_history"
from
    "service_role";

revoke truncate on table "public"."nova_users_problem_history"
from
    "service_role";

revoke
update
    on table "public"."nova_users_problem_history"
from
    "service_role";

alter table
    "public"."nova_leaderboard" drop constraint "nova_leaderboard_userId_fkey";

alter table
    "public"."nova_users_problem_history" drop constraint "nova_users_problem_history_userId_fkey";

alter table
    "public"."nova_leaderboard" drop constraint "nova_leaderboard_pkey";

alter table
    "public"."nova_users_problem_history" drop constraint "nova_users_problem_history_pkey";

drop index if exists "public"."nova_leaderboard_pkey";

drop index if exists "public"."nova_users_problem_history_pkey";

drop table "public"."nova_leaderboard";

drop table "public"."nova_users_problem_history";

create table "public"."nova_user_challenge" (
    "id" uuid not null default gen_random_uuid(),
    "score" real,
    "user_id" uuid,
    "problem_id" uuid,
    "created_at" timestamp with time zone not null default now()
);

alter table
    "public"."nova_user_challenge" enable row level security;

create table "public"."nova_user_problem_history" (
    "id" bigint generated by default as identity not null,
    "problem_id" uuid,
    "user_id" uuid,
    "score" real,
    "feedback" text,
    "user_prompt" text,
    "created_at" timestamp with time zone not null default now()
);

alter table
    "public"."nova_user_problem_history" enable row level security;

alter table
    "public"."nova_challenges" drop column "topic";

alter table
    "public"."nova_problems" drop column "exampleInput";

alter table
    "public"."nova_problems" drop column "exampleOutput";

alter table
    "public"."nova_problems"
add
    column "example_input" text;

alter table
    "public"."nova_problems"
add
    column "example_output" text;

alter table
    "public"."nova_test_timer_record"
alter column
    "problem_id"
set
    data type uuid using "problem_id" :: uuid;

CREATE UNIQUE INDEX nova_leaderboard_pkey ON public.nova_user_challenge USING btree (id);

CREATE UNIQUE INDEX nova_users_problem_history_pkey ON public.nova_user_problem_history USING btree (id);

alter table
    "public"."nova_user_challenge"
add
    constraint "nova_leaderboard_pkey" PRIMARY KEY using index "nova_leaderboard_pkey";

alter table
    "public"."nova_user_problem_history"
add
    constraint "nova_users_problem_history_pkey" PRIMARY KEY using index "nova_users_problem_history_pkey";

alter table
    "public"."nova_test_timer_record"
add
    constraint "nova_test_timer_record_problem_id_fkey" FOREIGN KEY (problem_id) REFERENCES nova_problems(id) not valid;

alter table
    "public"."nova_test_timer_record" validate constraint "nova_test_timer_record_problem_id_fkey";

alter table
    "public"."nova_user_challenge"
add
    constraint "nova_leaderboard_problem_id_fkey" FOREIGN KEY (problem_id) REFERENCES nova_problems(id) not valid;

alter table
    "public"."nova_user_challenge" validate constraint "nova_leaderboard_problem_id_fkey";

alter table
    "public"."nova_user_challenge"
add
    constraint "nova_leaderboard_userId_fkey" FOREIGN KEY (user_id) REFERENCES workspace_users(id) not valid;

alter table
    "public"."nova_user_challenge" validate constraint "nova_leaderboard_userId_fkey";

alter table
    "public"."nova_user_problem_history"
add
    constraint "nova_users_problem_history_problem_id_fkey" FOREIGN KEY (problem_id) REFERENCES nova_problems(id) not valid;

alter table
    "public"."nova_user_problem_history" validate constraint "nova_users_problem_history_problem_id_fkey";

alter table
    "public"."nova_user_problem_history"
add
    constraint "nova_users_problem_history_userId_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table
    "public"."nova_user_problem_history" validate constraint "nova_users_problem_history_userId_fkey";

grant delete on table "public"."nova_user_challenge" to "anon";

grant
insert
    on table "public"."nova_user_challenge" to "anon";

grant references on table "public"."nova_user_challenge" to "anon";

grant
select
    on table "public"."nova_user_challenge" to "anon";

grant trigger on table "public"."nova_user_challenge" to "anon";

grant truncate on table "public"."nova_user_challenge" to "anon";

grant
update
    on table "public"."nova_user_challenge" to "anon";

grant delete on table "public"."nova_user_challenge" to "authenticated";

grant
insert
    on table "public"."nova_user_challenge" to "authenticated";

grant references on table "public"."nova_user_challenge" to "authenticated";

grant
select
    on table "public"."nova_user_challenge" to "authenticated";

grant trigger on table "public"."nova_user_challenge" to "authenticated";

grant truncate on table "public"."nova_user_challenge" to "authenticated";

grant
update
    on table "public"."nova_user_challenge" to "authenticated";

grant delete on table "public"."nova_user_challenge" to "service_role";

grant
insert
    on table "public"."nova_user_challenge" to "service_role";

grant references on table "public"."nova_user_challenge" to "service_role";

grant
select
    on table "public"."nova_user_challenge" to "service_role";

grant trigger on table "public"."nova_user_challenge" to "service_role";

grant truncate on table "public"."nova_user_challenge" to "service_role";

grant
update
    on table "public"."nova_user_challenge" to "service_role";

grant delete on table "public"."nova_user_problem_history" to "anon";

grant
insert
    on table "public"."nova_user_problem_history" to "anon";

grant references on table "public"."nova_user_problem_history" to "anon";

grant
select
    on table "public"."nova_user_problem_history" to "anon";

grant trigger on table "public"."nova_user_problem_history" to "anon";

grant truncate on table "public"."nova_user_problem_history" to "anon";

grant
update
    on table "public"."nova_user_problem_history" to "anon";

grant delete on table "public"."nova_user_problem_history" to "authenticated";

grant
insert
    on table "public"."nova_user_problem_history" to "authenticated";

grant references on table "public"."nova_user_problem_history" to "authenticated";

grant
select
    on table "public"."nova_user_problem_history" to "authenticated";

grant trigger on table "public"."nova_user_problem_history" to "authenticated";

grant truncate on table "public"."nova_user_problem_history" to "authenticated";

grant
update
    on table "public"."nova_user_problem_history" to "authenticated";

grant delete on table "public"."nova_user_problem_history" to "service_role";

grant
insert
    on table "public"."nova_user_problem_history" to "service_role";

grant references on table "public"."nova_user_problem_history" to "service_role";

grant
select
    on table "public"."nova_user_problem_history" to "service_role";

grant trigger on table "public"."nova_user_problem_history" to "service_role";

grant truncate on table "public"."nova_user_problem_history" to "service_role";

grant
update
    on table "public"."nova_user_problem_history" to "service_role";

create policy "Enable all access for current user" on "public"."nova_user_challenge" as permissive for all to authenticated using ((user_id = auth.uid())) with check ((user_id = auth.uid()));

create policy "Enable all access for current user" on "public"."nova_user_problem_history" as permissive for all to public using ((user_id = auth.uid())) with check ((user_id = auth.uid()));

alter table
    "public"."nova_user_challenge" drop constraint "nova_leaderboard_problem_id_fkey";

alter table
    "public"."nova_user_challenge" drop constraint "nova_leaderboard_userId_fkey";

alter table
    "public"."nova_user_challenge" drop constraint "nova_leaderboard_pkey";

drop index if exists "public"."nova_leaderboard_pkey";

alter table
    "public"."nova_user_challenge" drop column "id";

alter table
    "public"."nova_user_challenge" drop column "problem_id";

alter table
    "public"."nova_user_challenge" drop column "score";

alter table
    "public"."nova_user_challenge"
add
    column "challenge_id" uuid;

alter table
    "public"."nova_user_challenge"
add
    column "feedback" text;

alter table
    "public"."nova_user_challenge"
add
    column "total_score" real;

alter table
    "public"."nova_user_challenge"
add
    constraint "nova_user_challenge_challenge_id_fkey" FOREIGN KEY (challenge_id) REFERENCES nova_challenges(id) not valid;

alter table
    "public"."nova_user_challenge" validate constraint "nova_user_challenge_challenge_id_fkey";

alter table
    "public"."nova_user_challenge"
add
    constraint "nova_user_challenge_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table
    "public"."nova_user_challenge" validate constraint "nova_user_challenge_user_id_fkey";

drop policy "Enable all access for current user" on "public"."nova_user_problem_history";

revoke delete on table "public"."nova_user_problem_history"
from
    "anon";

revoke
insert
    on table "public"."nova_user_problem_history"
from
    "anon";

revoke references on table "public"."nova_user_problem_history"
from
    "anon";

revoke
select
    on table "public"."nova_user_problem_history"
from
    "anon";

revoke trigger on table "public"."nova_user_problem_history"
from
    "anon";

revoke truncate on table "public"."nova_user_problem_history"
from
    "anon";

revoke
update
    on table "public"."nova_user_problem_history"
from
    "anon";

revoke delete on table "public"."nova_user_problem_history"
from
    "authenticated";

revoke
insert
    on table "public"."nova_user_problem_history"
from
    "authenticated";

revoke references on table "public"."nova_user_problem_history"
from
    "authenticated";

revoke
select
    on table "public"."nova_user_problem_history"
from
    "authenticated";

revoke trigger on table "public"."nova_user_problem_history"
from
    "authenticated";

revoke truncate on table "public"."nova_user_problem_history"
from
    "authenticated";

revoke
update
    on table "public"."nova_user_problem_history"
from
    "authenticated";

revoke delete on table "public"."nova_user_problem_history"
from
    "service_role";

revoke
insert
    on table "public"."nova_user_problem_history"
from
    "service_role";

revoke references on table "public"."nova_user_problem_history"
from
    "service_role";

revoke
select
    on table "public"."nova_user_problem_history"
from
    "service_role";

revoke trigger on table "public"."nova_user_problem_history"
from
    "service_role";

revoke truncate on table "public"."nova_user_problem_history"
from
    "service_role";

revoke
update
    on table "public"."nova_user_problem_history"
from
    "service_role";

alter table
    "public"."nova_user_problem_history" drop constraint "nova_users_problem_history_problem_id_fkey";

alter table
    "public"."nova_user_problem_history" drop constraint "nova_users_problem_history_userId_fkey";

alter table
    "public"."nova_user_problem_history" drop constraint "nova_users_problem_history_pkey";

drop index if exists "public"."nova_users_problem_history_pkey";

drop table "public"."nova_user_problem_history";

create table "public"."nova_submissions" (
    "id" bigint generated by default as identity not null,
    "problem_id" uuid,
    "user_id" uuid,
    "score" real,
    "feedback" text,
    "user_prompt" text,
    "created_at" timestamp with time zone not null default now()
);

alter table
    "public"."nova_submissions" enable row level security;

CREATE UNIQUE INDEX nova_users_problem_history_pkey ON public.nova_submissions USING btree (id);

alter table
    "public"."nova_submissions"
add
    constraint "nova_users_problem_history_pkey" PRIMARY KEY using index "nova_users_problem_history_pkey";

alter table
    "public"."nova_submissions"
add
    constraint "nova_users_problem_history_problem_id_fkey" FOREIGN KEY (problem_id) REFERENCES nova_problems(id) not valid;

alter table
    "public"."nova_submissions" validate constraint "nova_users_problem_history_problem_id_fkey";

alter table
    "public"."nova_submissions"
add
    constraint "nova_users_problem_history_userId_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table
    "public"."nova_submissions" validate constraint "nova_users_problem_history_userId_fkey";

grant delete on table "public"."nova_submissions" to "anon";

grant
insert
    on table "public"."nova_submissions" to "anon";

grant references on table "public"."nova_submissions" to "anon";

grant
select
    on table "public"."nova_submissions" to "anon";

grant trigger on table "public"."nova_submissions" to "anon";

grant truncate on table "public"."nova_submissions" to "anon";

grant
update
    on table "public"."nova_submissions" to "anon";

grant delete on table "public"."nova_submissions" to "authenticated";

grant
insert
    on table "public"."nova_submissions" to "authenticated";

grant references on table "public"."nova_submissions" to "authenticated";

grant
select
    on table "public"."nova_submissions" to "authenticated";

grant trigger on table "public"."nova_submissions" to "authenticated";

grant truncate on table "public"."nova_submissions" to "authenticated";

grant
update
    on table "public"."nova_submissions" to "authenticated";

grant delete on table "public"."nova_submissions" to "service_role";

grant
insert
    on table "public"."nova_submissions" to "service_role";

grant references on table "public"."nova_submissions" to "service_role";

grant
select
    on table "public"."nova_submissions" to "service_role";

grant trigger on table "public"."nova_submissions" to "service_role";

grant truncate on table "public"."nova_submissions" to "service_role";

grant
update
    on table "public"."nova_submissions" to "service_role";

create policy "Enable all access for current user" on "public"."nova_submissions" as permissive for all to public using ((user_id = auth.uid())) with check ((user_id = auth.uid()));

drop policy "Enable all access for current user" on "public"."nova_test_timer_record";

revoke delete on table "public"."nova_test_timer_record"
from
    "anon";

revoke
insert
    on table "public"."nova_test_timer_record"
from
    "anon";

revoke references on table "public"."nova_test_timer_record"
from
    "anon";

revoke
select
    on table "public"."nova_test_timer_record"
from
    "anon";

revoke trigger on table "public"."nova_test_timer_record"
from
    "anon";

revoke truncate on table "public"."nova_test_timer_record"
from
    "anon";

revoke
update
    on table "public"."nova_test_timer_record"
from
    "anon";

revoke delete on table "public"."nova_test_timer_record"
from
    "authenticated";

revoke
insert
    on table "public"."nova_test_timer_record"
from
    "authenticated";

revoke references on table "public"."nova_test_timer_record"
from
    "authenticated";

revoke
select
    on table "public"."nova_test_timer_record"
from
    "authenticated";

revoke trigger on table "public"."nova_test_timer_record"
from
    "authenticated";

revoke truncate on table "public"."nova_test_timer_record"
from
    "authenticated";

revoke
update
    on table "public"."nova_test_timer_record"
from
    "authenticated";

revoke delete on table "public"."nova_test_timer_record"
from
    "service_role";

revoke
insert
    on table "public"."nova_test_timer_record"
from
    "service_role";

revoke references on table "public"."nova_test_timer_record"
from
    "service_role";

revoke
select
    on table "public"."nova_test_timer_record"
from
    "service_role";

revoke trigger on table "public"."nova_test_timer_record"
from
    "service_role";

revoke truncate on table "public"."nova_test_timer_record"
from
    "service_role";

revoke
update
    on table "public"."nova_test_timer_record"
from
    "service_role";

alter table
    "public"."nova_test_timer_record" drop constraint "nova_test_timer_record_problem_id_fkey";

alter table
    "public"."nova_test_timer_record" drop constraint "nova_test_timer_record_userId_fkey";

alter table
    "public"."nova_test_timer_record" drop constraint "nova_test_timer_record_pkey";

drop index if exists "public"."nova_test_timer_record_pkey";

drop table "public"."nova_test_timer_record";

create table "public"."nova_test_timer_records" (
    "id" uuid not null default gen_random_uuid(),
    "duration" integer,
    "problem_id" uuid,
    "user_id" uuid,
    "test_status" text,
    "created_at" timestamp with time zone not null default now()
);

alter table
    "public"."nova_test_timer_records" enable row level security;

CREATE UNIQUE INDEX nova_test_timer_record_pkey ON public.nova_test_timer_records USING btree (id);

alter table
    "public"."nova_test_timer_records"
add
    constraint "nova_test_timer_record_pkey" PRIMARY KEY using index "nova_test_timer_record_pkey";

alter table
    "public"."nova_test_timer_records"
add
    constraint "nova_test_timer_records_problem_id_fkey" FOREIGN KEY (problem_id) REFERENCES nova_problems(id) not valid;

alter table
    "public"."nova_test_timer_records" validate constraint "nova_test_timer_records_problem_id_fkey";

alter table
    "public"."nova_test_timer_records"
add
    constraint "nova_test_timer_records_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table
    "public"."nova_test_timer_records" validate constraint "nova_test_timer_records_user_id_fkey";

grant delete on table "public"."nova_test_timer_records" to "anon";

grant
insert
    on table "public"."nova_test_timer_records" to "anon";

grant references on table "public"."nova_test_timer_records" to "anon";

grant
select
    on table "public"."nova_test_timer_records" to "anon";

grant trigger on table "public"."nova_test_timer_records" to "anon";

grant truncate on table "public"."nova_test_timer_records" to "anon";

grant
update
    on table "public"."nova_test_timer_records" to "anon";

grant delete on table "public"."nova_test_timer_records" to "authenticated";

grant
insert
    on table "public"."nova_test_timer_records" to "authenticated";

grant references on table "public"."nova_test_timer_records" to "authenticated";

grant
select
    on table "public"."nova_test_timer_records" to "authenticated";

grant trigger on table "public"."nova_test_timer_records" to "authenticated";

grant truncate on table "public"."nova_test_timer_records" to "authenticated";

grant
update
    on table "public"."nova_test_timer_records" to "authenticated";

grant delete on table "public"."nova_test_timer_records" to "service_role";

grant
insert
    on table "public"."nova_test_timer_records" to "service_role";

grant references on table "public"."nova_test_timer_records" to "service_role";

grant
select
    on table "public"."nova_test_timer_records" to "service_role";

grant trigger on table "public"."nova_test_timer_records" to "service_role";

grant truncate on table "public"."nova_test_timer_records" to "service_role";

grant
update
    on table "public"."nova_test_timer_records" to "service_role";

create policy "Enable all access for current user" on "public"."nova_test_timer_records" as permissive for all to public using ((user_id = auth.uid())) with check ((user_id = auth.uid()));

alter table
    "public"."nova_submissions" drop constraint "nova_users_problem_history_problem_id_fkey";

alter table
    "public"."nova_submissions" drop constraint "nova_users_problem_history_userId_fkey";

alter table
    "public"."nova_test_timer_records" drop constraint "nova_test_timer_records_problem_id_fkey";

alter table
    "public"."nova_test_timer_records" drop constraint "nova_test_timer_records_user_id_fkey";

alter table
    "public"."nova_user_challenge" drop constraint "nova_user_challenge_challenge_id_fkey";

alter table
    "public"."nova_user_challenge" drop constraint "nova_user_challenge_user_id_fkey";

alter table
    "public"."nova_submissions"
add
    constraint "nova_submissions_problem_id_fkey" FOREIGN KEY (problem_id) REFERENCES nova_problems(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table
    "public"."nova_submissions" validate constraint "nova_submissions_problem_id_fkey";

alter table
    "public"."nova_submissions"
add
    constraint "nova_submissions_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table
    "public"."nova_submissions" validate constraint "nova_submissions_user_id_fkey";

alter table
    "public"."nova_test_timer_records"
add
    constraint "nova_test_timer_records_problem_id_fkey" FOREIGN KEY (problem_id) REFERENCES nova_problems(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table
    "public"."nova_test_timer_records" validate constraint "nova_test_timer_records_problem_id_fkey";

alter table
    "public"."nova_test_timer_records"
add
    constraint "nova_test_timer_records_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table
    "public"."nova_test_timer_records" validate constraint "nova_test_timer_records_user_id_fkey";

alter table
    "public"."nova_user_challenge"
add
    constraint "nova_user_challenge_challenge_id_fkey" FOREIGN KEY (challenge_id) REFERENCES nova_challenges(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table
    "public"."nova_user_challenge" validate constraint "nova_user_challenge_challenge_id_fkey";

alter table
    "public"."nova_user_challenge"
add
    constraint "nova_user_challenge_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table
    "public"."nova_user_challenge" validate constraint "nova_user_challenge_user_id_fkey";

alter table
    "public"."nova_test_timer_records" drop constraint "nova_test_timer_records_problem_id_fkey";

alter table
    "public"."nova_test_timer_records" drop column "problem_id";

alter table
    "public"."nova_test_timer_records"
add
    column "challenge_id" uuid;

alter table
    "public"."nova_test_timer_records"
add
    constraint "nova_test_timer_records_challenge_id_fkey" FOREIGN KEY (challenge_id) REFERENCES nova_challenges(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table
    "public"."nova_test_timer_records" validate constraint "nova_test_timer_records_challenge_id_fkey";

drop policy "Enable all access for current user" on "public"."nova_test_timer_records";

drop policy "Enable all access for current user" on "public"."nova_user_challenge";

drop policy "Enable all access for current user" on "public"."nova_submissions";

revoke delete on table "public"."nova_test_timer_records"
from
    "anon";

revoke
insert
    on table "public"."nova_test_timer_records"
from
    "anon";

revoke references on table "public"."nova_test_timer_records"
from
    "anon";

revoke
select
    on table "public"."nova_test_timer_records"
from
    "anon";

revoke trigger on table "public"."nova_test_timer_records"
from
    "anon";

revoke truncate on table "public"."nova_test_timer_records"
from
    "anon";

revoke
update
    on table "public"."nova_test_timer_records"
from
    "anon";

revoke delete on table "public"."nova_test_timer_records"
from
    "authenticated";

revoke
insert
    on table "public"."nova_test_timer_records"
from
    "authenticated";

revoke references on table "public"."nova_test_timer_records"
from
    "authenticated";

revoke
select
    on table "public"."nova_test_timer_records"
from
    "authenticated";

revoke trigger on table "public"."nova_test_timer_records"
from
    "authenticated";

revoke truncate on table "public"."nova_test_timer_records"
from
    "authenticated";

revoke
update
    on table "public"."nova_test_timer_records"
from
    "authenticated";

revoke delete on table "public"."nova_test_timer_records"
from
    "service_role";

revoke
insert
    on table "public"."nova_test_timer_records"
from
    "service_role";

revoke references on table "public"."nova_test_timer_records"
from
    "service_role";

revoke
select
    on table "public"."nova_test_timer_records"
from
    "service_role";

revoke trigger on table "public"."nova_test_timer_records"
from
    "service_role";

revoke truncate on table "public"."nova_test_timer_records"
from
    "service_role";

revoke
update
    on table "public"."nova_test_timer_records"
from
    "service_role";

revoke delete on table "public"."nova_user_challenge"
from
    "anon";

revoke
insert
    on table "public"."nova_user_challenge"
from
    "anon";

revoke references on table "public"."nova_user_challenge"
from
    "anon";

revoke
select
    on table "public"."nova_user_challenge"
from
    "anon";

revoke trigger on table "public"."nova_user_challenge"
from
    "anon";

revoke truncate on table "public"."nova_user_challenge"
from
    "anon";

revoke
update
    on table "public"."nova_user_challenge"
from
    "anon";

revoke delete on table "public"."nova_user_challenge"
from
    "authenticated";

revoke
insert
    on table "public"."nova_user_challenge"
from
    "authenticated";

revoke references on table "public"."nova_user_challenge"
from
    "authenticated";

revoke
select
    on table "public"."nova_user_challenge"
from
    "authenticated";

revoke trigger on table "public"."nova_user_challenge"
from
    "authenticated";

revoke truncate on table "public"."nova_user_challenge"
from
    "authenticated";

revoke
update
    on table "public"."nova_user_challenge"
from
    "authenticated";

revoke delete on table "public"."nova_user_challenge"
from
    "service_role";

revoke
insert
    on table "public"."nova_user_challenge"
from
    "service_role";

revoke references on table "public"."nova_user_challenge"
from
    "service_role";

revoke
select
    on table "public"."nova_user_challenge"
from
    "service_role";

revoke trigger on table "public"."nova_user_challenge"
from
    "service_role";

revoke truncate on table "public"."nova_user_challenge"
from
    "service_role";

revoke
update
    on table "public"."nova_user_challenge"
from
    "service_role";

alter table
    "public"."nova_test_timer_records" drop constraint "nova_test_timer_records_challenge_id_fkey";

alter table
    "public"."nova_test_timer_records" drop constraint "nova_test_timer_records_user_id_fkey";

alter table
    "public"."nova_user_challenge" drop constraint "nova_user_challenge_challenge_id_fkey";

alter table
    "public"."nova_user_challenge" drop constraint "nova_user_challenge_user_id_fkey";

alter table
    "public"."nova_test_timer_records" drop constraint "nova_test_timer_record_pkey";

drop index if exists "public"."nova_test_timer_record_pkey";

drop table "public"."nova_test_timer_records";

drop table "public"."nova_user_challenge";

create table "public"."nova_challenge_status" (
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid,
    "challenge_id" uuid,
    "status" text,
    "start_time" timestamp with time zone,
    "end_time" timestamp with time zone,
    "total_score" real,
    "feedback" text,
    "created_at" timestamp with time zone not null default now()
);

alter table
    "public"."nova_challenge_status" enable row level security;

CREATE UNIQUE INDEX nova_challenge_status_pkey ON public.nova_challenge_status USING btree (id);

alter table
    "public"."nova_challenge_status"
add
    constraint "nova_challenge_status_pkey" PRIMARY KEY using index "nova_challenge_status_pkey";

alter table
    "public"."nova_challenge_status"
add
    constraint "nova_challenge_status_challenge_id_fkey" FOREIGN KEY (challenge_id) REFERENCES nova_challenges(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table
    "public"."nova_challenge_status" validate constraint "nova_challenge_status_challenge_id_fkey";

alter table
    "public"."nova_challenge_status"
add
    constraint "nova_challenge_status_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table
    "public"."nova_challenge_status" validate constraint "nova_challenge_status_user_id_fkey";

grant delete on table "public"."nova_challenge_status" to "anon";

grant
insert
    on table "public"."nova_challenge_status" to "anon";

grant references on table "public"."nova_challenge_status" to "anon";

grant
select
    on table "public"."nova_challenge_status" to "anon";

grant trigger on table "public"."nova_challenge_status" to "anon";

grant truncate on table "public"."nova_challenge_status" to "anon";

grant
update
    on table "public"."nova_challenge_status" to "anon";

grant delete on table "public"."nova_challenge_status" to "authenticated";

grant
insert
    on table "public"."nova_challenge_status" to "authenticated";

grant references on table "public"."nova_challenge_status" to "authenticated";

grant
select
    on table "public"."nova_challenge_status" to "authenticated";

grant trigger on table "public"."nova_challenge_status" to "authenticated";

grant truncate on table "public"."nova_challenge_status" to "authenticated";

grant
update
    on table "public"."nova_challenge_status" to "authenticated";

grant delete on table "public"."nova_challenge_status" to "service_role";

grant
insert
    on table "public"."nova_challenge_status" to "service_role";

grant references on table "public"."nova_challenge_status" to "service_role";

grant
select
    on table "public"."nova_challenge_status" to "service_role";

grant trigger on table "public"."nova_challenge_status" to "service_role";

grant truncate on table "public"."nova_challenge_status" to "service_role";

grant
update
    on table "public"."nova_challenge_status" to "service_role";

create policy "Enable all access for current user" on "public"."nova_challenge_status" as permissive for all to authenticated using ((user_id = auth.uid())) with check ((user_id = auth.uid()));

create policy "Enable all access for current user" on "public"."nova_submissions" as permissive for all to authenticated using ((user_id = auth.uid())) with check ((user_id = auth.uid()));

alter table
    "public"."nova_challenge_status"
alter column
    "challenge_id"
set
    not null;

alter table
    "public"."nova_challenge_status"
alter column
    "user_id"
set
    not null;

alter table
    "public"."nova_challenges"
alter column
    "title"
set
    not null;

alter table
    "public"."nova_problem_constraints"
alter column
    "problem_id"
set
    not null;

alter table
    "public"."nova_problem_testcases"
alter column
    "problem_id"
set
    not null;

alter table
    "public"."nova_problems"
alter column
    "challenge_id"
set
    not null;

alter table
    "public"."nova_problems"
alter column
    "title"
set
    not null;

alter table
    "public"."nova_submissions"
alter column
    "problem_id"
set
    not null;

alter table
    "public"."nova_submissions"
alter column
    "user_id"
set
    not null;

alter table
    "public"."nova_submissions"
alter column
    "user_prompt"
set
    not null;

alter table
    "public"."nova_challenge_status" drop column "feedback";