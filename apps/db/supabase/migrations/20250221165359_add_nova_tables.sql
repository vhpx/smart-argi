create table "public"."nova_leaderboard" (
    "id" uuid not null default gen_random_uuid(),
    "score" real,
    "user_id" uuid,
    "problem_id" text,
    "created_at" timestamp with time zone not null default now()
);

alter table
    "public"."nova_leaderboard" enable row level security;

create table "public"."nova_test_timer_record" (
    "id" uuid not null default gen_random_uuid(),
    "duration" integer,
    "problem_id" text,
    "user_id" uuid,
    "test_status" text,
    "created_at" timestamp with time zone not null default now()
);

alter table
    "public"."nova_test_timer_record" enable row level security;

create table "public"."nova_users_problem_history" (
    "id" bigint generated by default as identity not null,
    "problem_id" text,
    "user_id" uuid,
    "score" real,
    "feedback" text,
    "user_prompt" text,
    "problem_set_id" text,
    "created_at" timestamp with time zone not null default now()
);

alter table
    "public"."nova_users_problem_history" enable row level security;

CREATE UNIQUE INDEX nova_leaderboard_pkey ON public.nova_leaderboard USING btree (id);

CREATE UNIQUE INDEX nova_test_timer_record_pkey ON public.nova_test_timer_record USING btree (id);

CREATE UNIQUE INDEX nova_users_problem_history_pkey ON public.nova_users_problem_history USING btree (id);

alter table
    "public"."nova_leaderboard"
add
    constraint "nova_leaderboard_pkey" PRIMARY KEY using index "nova_leaderboard_pkey";

alter table
    "public"."nova_test_timer_record"
add
    constraint "nova_test_timer_record_pkey" PRIMARY KEY using index "nova_test_timer_record_pkey";

alter table
    "public"."nova_users_problem_history"
add
    constraint "nova_users_problem_history_pkey" PRIMARY KEY using index "nova_users_problem_history_pkey";

alter table
    "public"."nova_leaderboard"
add
    constraint "nova_leaderboard_userId_fkey" FOREIGN KEY (user_id) REFERENCES workspace_users(id) not valid;

alter table
    "public"."nova_leaderboard" validate constraint "nova_leaderboard_userId_fkey";

alter table
    "public"."nova_test_timer_record"
add
    constraint "nova_test_timer_record_userId_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table
    "public"."nova_test_timer_record" validate constraint "nova_test_timer_record_userId_fkey";

alter table
    "public"."nova_users_problem_history"
add
    constraint "nova_users_problem_history_userId_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table
    "public"."nova_users_problem_history" validate constraint "nova_users_problem_history_userId_fkey";

grant delete on table "public"."nova_leaderboard" to "anon";

grant
insert
    on table "public"."nova_leaderboard" to "anon";

grant references on table "public"."nova_leaderboard" to "anon";

grant
select
    on table "public"."nova_leaderboard" to "anon";

grant trigger on table "public"."nova_leaderboard" to "anon";

grant truncate on table "public"."nova_leaderboard" to "anon";

grant
update
    on table "public"."nova_leaderboard" to "anon";

grant delete on table "public"."nova_leaderboard" to "authenticated";

grant
insert
    on table "public"."nova_leaderboard" to "authenticated";

grant references on table "public"."nova_leaderboard" to "authenticated";

grant
select
    on table "public"."nova_leaderboard" to "authenticated";

grant trigger on table "public"."nova_leaderboard" to "authenticated";

grant truncate on table "public"."nova_leaderboard" to "authenticated";

grant
update
    on table "public"."nova_leaderboard" to "authenticated";

grant delete on table "public"."nova_leaderboard" to "service_role";

grant
insert
    on table "public"."nova_leaderboard" to "service_role";

grant references on table "public"."nova_leaderboard" to "service_role";

grant
select
    on table "public"."nova_leaderboard" to "service_role";

grant trigger on table "public"."nova_leaderboard" to "service_role";

grant truncate on table "public"."nova_leaderboard" to "service_role";

grant
update
    on table "public"."nova_leaderboard" to "service_role";

grant delete on table "public"."nova_test_timer_record" to "anon";

grant
insert
    on table "public"."nova_test_timer_record" to "anon";

grant references on table "public"."nova_test_timer_record" to "anon";

grant
select
    on table "public"."nova_test_timer_record" to "anon";

grant trigger on table "public"."nova_test_timer_record" to "anon";

grant truncate on table "public"."nova_test_timer_record" to "anon";

grant
update
    on table "public"."nova_test_timer_record" to "anon";

grant delete on table "public"."nova_test_timer_record" to "authenticated";

grant
insert
    on table "public"."nova_test_timer_record" to "authenticated";

grant references on table "public"."nova_test_timer_record" to "authenticated";

grant
select
    on table "public"."nova_test_timer_record" to "authenticated";

grant trigger on table "public"."nova_test_timer_record" to "authenticated";

grant truncate on table "public"."nova_test_timer_record" to "authenticated";

grant
update
    on table "public"."nova_test_timer_record" to "authenticated";

grant delete on table "public"."nova_test_timer_record" to "service_role";

grant
insert
    on table "public"."nova_test_timer_record" to "service_role";

grant references on table "public"."nova_test_timer_record" to "service_role";

grant
select
    on table "public"."nova_test_timer_record" to "service_role";

grant trigger on table "public"."nova_test_timer_record" to "service_role";

grant truncate on table "public"."nova_test_timer_record" to "service_role";

grant
update
    on table "public"."nova_test_timer_record" to "service_role";

grant delete on table "public"."nova_users_problem_history" to "anon";

grant
insert
    on table "public"."nova_users_problem_history" to "anon";

grant references on table "public"."nova_users_problem_history" to "anon";

grant
select
    on table "public"."nova_users_problem_history" to "anon";

grant trigger on table "public"."nova_users_problem_history" to "anon";

grant truncate on table "public"."nova_users_problem_history" to "anon";

grant
update
    on table "public"."nova_users_problem_history" to "anon";

grant delete on table "public"."nova_users_problem_history" to "authenticated";

grant
insert
    on table "public"."nova_users_problem_history" to "authenticated";

grant references on table "public"."nova_users_problem_history" to "authenticated";

grant
select
    on table "public"."nova_users_problem_history" to "authenticated";

grant trigger on table "public"."nova_users_problem_history" to "authenticated";

grant truncate on table "public"."nova_users_problem_history" to "authenticated";

grant
update
    on table "public"."nova_users_problem_history" to "authenticated";

grant delete on table "public"."nova_users_problem_history" to "service_role";

grant
insert
    on table "public"."nova_users_problem_history" to "service_role";

grant references on table "public"."nova_users_problem_history" to "service_role";

grant
select
    on table "public"."nova_users_problem_history" to "service_role";

grant trigger on table "public"."nova_users_problem_history" to "service_role";

grant truncate on table "public"."nova_users_problem_history" to "service_role";

grant
update
    on table "public"."nova_users_problem_history" to "service_role";

create policy "Enable all access for current user" on "public"."nova_leaderboard" as permissive for all to authenticated using ((user_id = auth.uid())) with check ((user_id = auth.uid()));

create policy "Enable all access for current user" on "public"."nova_test_timer_record" as permissive for all to public using ((user_id = auth.uid())) with check ((user_id = auth.uid()));

create policy "Enable all access for current user" on "public"."nova_users_problem_history" as permissive for all to public using ((user_id = auth.uid())) with check ((user_id = auth.uid()));